//
// Candidate.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Candidate: Codable, JSONEncodable, Hashable {

    public static let nameRule = StringRule(minLength: nil, maxLength: 16, pattern: nil)
    public static let surnameRule = StringRule(minLength: nil, maxLength: 64, pattern: nil)
    public static let patronymicRule = StringRule(minLength: nil, maxLength: 32, pattern: nil)
    public static let educationRule = StringRule(minLength: nil, maxLength: 128, pattern: nil)
    public static let countryRule = StringRule(minLength: nil, maxLength: 32, pattern: nil)
    public static let cityRule = StringRule(minLength: nil, maxLength: 32, pattern: nil)
    public static let emailRule = StringRule(minLength: nil, maxLength: 254, pattern: nil)
    public static let phoneRule = StringRule(minLength: nil, maxLength: 16, pattern: nil)
    public static let resumeRule = StringRule(minLength: nil, maxLength: 128, pattern: nil)
    public static let achivmentObjectsRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 2147483647, exclusiveMaximum: false, multipleOf: nil)
    public static let achivmentClientsRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 2147483647, exclusiveMaximum: false, multipleOf: nil)
    public static let achivmentLeadsRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 2147483647, exclusiveMaximum: false, multipleOf: nil)
    public static let achivmentExclusivesRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 2147483647, exclusiveMaximum: false, multipleOf: nil)
    public static let achivmentDealsRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 2147483647, exclusiveMaximum: false, multipleOf: nil)
    public var id: Int
    public var age: Int
    public var officeName: String
    public var courses: [Course]
    public var coursesIds: [Int]?
    public var birth: Date
    public var isArchive: Bool?
    public var name: String
    public var surname: String
    public var patronymic: String?
    public var education: String?
    public var photo: String?
    public var country: String?
    public var city: String?
    public var email: String?
    public var phone: String
    public var resume: String?
    public var agreement: String?
    public var isFree: Bool?
    public var achivmentObjects: Int?
    public var achivmentClients: Int?
    public var achivmentLeads: Int?
    public var achivmentExclusives: Int?
    public var achivmentDeals: Int?
    public var createdAt: Date
    public var updatedAt: Date
    public var office: Int?

    public init(id: Int, age: Int, officeName: String, courses: [Course], coursesIds: [Int]? = nil, birth: Date, isArchive: Bool? = nil, name: String, surname: String, patronymic: String? = nil, education: String? = nil, photo: String? = nil, country: String? = nil, city: String? = nil, email: String?, phone: String, resume: String? = nil, agreement: String? = nil, isFree: Bool? = nil, achivmentObjects: Int? = nil, achivmentClients: Int? = nil, achivmentLeads: Int? = nil, achivmentExclusives: Int? = nil, achivmentDeals: Int? = nil, createdAt: Date, updatedAt: Date, office: Int? = nil) {
        self.id = id
        self.age = age
        self.officeName = officeName
        self.courses = courses
        self.coursesIds = coursesIds
        self.birth = birth
        self.isArchive = isArchive
        self.name = name
        self.surname = surname
        self.patronymic = patronymic
        self.education = education
        self.photo = photo
        self.country = country
        self.city = city
        self.email = email
        self.phone = phone
        self.resume = resume
        self.agreement = agreement
        self.isFree = isFree
        self.achivmentObjects = achivmentObjects
        self.achivmentClients = achivmentClients
        self.achivmentLeads = achivmentLeads
        self.achivmentExclusives = achivmentExclusives
        self.achivmentDeals = achivmentDeals
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.office = office
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case age
        case officeName = "office_name"
        case courses
        case coursesIds = "courses_ids"
        case birth
        case isArchive = "is_archive"
        case name
        case surname
        case patronymic
        case education
        case photo
        case country
        case city
        case email
        case phone
        case resume
        case agreement
        case isFree = "is_free"
        case achivmentObjects = "achivment_objects"
        case achivmentClients = "achivment_clients"
        case achivmentLeads = "achivment_leads"
        case achivmentExclusives = "achivment_exclusives"
        case achivmentDeals = "achivment_deals"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case office
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(age, forKey: .age)
        try container.encode(officeName, forKey: .officeName)
        try container.encode(courses, forKey: .courses)
        try container.encodeIfPresent(coursesIds, forKey: .coursesIds)
        try container.encode(birth, forKey: .birth)
        try container.encodeIfPresent(isArchive, forKey: .isArchive)
        try container.encode(name, forKey: .name)
        try container.encode(surname, forKey: .surname)
        try container.encodeIfPresent(patronymic, forKey: .patronymic)
        try container.encodeIfPresent(education, forKey: .education)
        try container.encodeIfPresent(photo, forKey: .photo)
        try container.encodeIfPresent(country, forKey: .country)
        try container.encodeIfPresent(city, forKey: .city)
        try container.encode(email, forKey: .email)
        try container.encode(phone, forKey: .phone)
        try container.encodeIfPresent(resume, forKey: .resume)
        try container.encodeIfPresent(agreement, forKey: .agreement)
        try container.encodeIfPresent(isFree, forKey: .isFree)
        try container.encodeIfPresent(achivmentObjects, forKey: .achivmentObjects)
        try container.encodeIfPresent(achivmentClients, forKey: .achivmentClients)
        try container.encodeIfPresent(achivmentLeads, forKey: .achivmentLeads)
        try container.encodeIfPresent(achivmentExclusives, forKey: .achivmentExclusives)
        try container.encodeIfPresent(achivmentDeals, forKey: .achivmentDeals)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(office, forKey: .office)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension Candidate: Identifiable {}
