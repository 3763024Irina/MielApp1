//
// PatchedOffice.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PatchedOffice: Codable, JSONEncodable, Hashable {

    public static let nameRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    public static let locationRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    public static let phoneRule = StringRule(minLength: nil, maxLength: 15, pattern: nil)
    public static let quotaRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 2147483647, exclusiveMaximum: false, multipleOf: nil)
    public static let usedQuotaRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 2147483647, exclusiveMaximum: false, multipleOf: nil)
    public var id: Int?
    public var name: String?
    public var location: String?
    public var phone: String?
    public var quota: Int?
    public var usedQuota: Int?
    public var createdAt: Date?

    public init(id: Int? = nil, name: String? = nil, location: String? = nil, phone: String? = nil, quota: Int? = nil, usedQuota: Int? = nil, createdAt: Date? = nil) {
        self.id = id
        self.name = name
        self.location = location
        self.phone = phone
        self.quota = quota
        self.usedQuota = usedQuota
        self.createdAt = createdAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case location
        case phone
        case quota
        case usedQuota = "used_quota"
        case createdAt = "created_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(location, forKey: .location)
        try container.encodeIfPresent(phone, forKey: .phone)
        try container.encodeIfPresent(quota, forKey: .quota)
        try container.encodeIfPresent(usedQuota, forKey: .usedQuota)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension PatchedOffice: Identifiable {}
