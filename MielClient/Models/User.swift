//
// User.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct User: Codable, JSONEncodable, Hashable {

    public static let usernameRule = StringRule(minLength: nil, maxLength: 150, pattern: "/^[\\w.@+-]+$/")
    public static let emailRule = StringRule(minLength: nil, maxLength: 254, pattern: nil)
    public static let firstNameRule = StringRule(minLength: nil, maxLength: 150, pattern: nil)
    public static let lastNameRule = StringRule(minLength: nil, maxLength: 150, pattern: nil)
    public static let patronymicRule = StringRule(minLength: nil, maxLength: 32, pattern: nil)
    public static let phoneRule = StringRule(minLength: nil, maxLength: 15, pattern: nil)
    /** Обязательное поле. Не более 150 символов. Только буквы, цифры и символы @/./+/-/_. */
    public var username: String
    public var password: String?
    public var email: String?
    public var firstName: String?
    public var lastName: String?
    public var patronymic: String?
    public var phone: String?
    public var photo: String?
    public var fullName: String

    public init(username: String, password: String? = nil, email: String? = nil, firstName: String? = nil, lastName: String? = nil, patronymic: String? = nil, phone: String? = nil, photo: String? = nil, fullName: String) {
        self.username = username
        self.password = password
        self.email = email
        self.firstName = firstName
        self.lastName = lastName
        self.patronymic = patronymic
        self.phone = phone
        self.photo = photo
        self.fullName = fullName
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case username
        case password
        case email
        case firstName = "first_name"
        case lastName = "last_name"
        case patronymic
        case phone
        case photo
        case fullName = "full_name"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(username, forKey: .username)
        try container.encodeIfPresent(password, forKey: .password)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(patronymic, forKey: .patronymic)
        try container.encodeIfPresent(phone, forKey: .phone)
        try container.encodeIfPresent(photo, forKey: .photo)
        try container.encode(fullName, forKey: .fullName)
    }
}

