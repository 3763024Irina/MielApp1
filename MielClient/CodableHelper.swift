//
// CodableHelper.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation


public struct AnyCodable: Codable {
  let value: Any

  init(_ value: Any) { self.value = value }

  public init(from decoder: Decoder) throws {
    let container = try decoder.singleValueContainer()
    if let v = try? container.decode(Bool.self) {
      value = v
    } else if let v = try? container.decode(Int.self) {
      value = v
    } else if let v = try? container.decode(Double.self) {
      value = v
    } else if let v = try? container.decode(String.self) {
      value = v
    } else if let v = try? container.decode([String: AnyCodable].self) {
      value = v.mapValues { $0.value }
    } else if let v = try? container.decode([AnyCodable].self) {
      value = v.map { $0.value }
    } else if container.decodeNil() {
      value = ()
    } else {
      throw DecodingError.dataCorruptedError(in: container, debugDescription: "AnyCodable value cannot be decoded")
    }
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.singleValueContainer()
    switch value {
    case let v as Bool: try container.encode(v)
    case let v as Int: try container.encode(v)
    case let v as Double: try container.encode(v)
    case let v as String: try container.encode(v)
    case let v as [String: Any]:
      let dict = v.mapValues { AnyCodable($0) }
      try container.encode(dict)
    case let v as [Any]:
      let arr = v.map { AnyCodable($0) }
      try container.encode(arr)
    case _ as Void:
      try container.encodeNil()
    default:
      let context = EncodingError.Context(
        codingPath: container.codingPath,
        debugDescription: "AnyCodable value cannot be encoded"
      )
      throw EncodingError.invalidValue(value, context)
    }
  }
}

open class CodableHelper {
    private static var customDateFormatter: DateFormatter?
    private static var defaultDateFormatter: DateFormatter = OpenISO8601DateFormatter()

    private static var customJSONDecoder: JSONDecoder?
    private static var defaultJSONDecoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .formatted(CodableHelper.dateFormatter)
        return decoder
    }()

    private static var customJSONEncoder: JSONEncoder?
    private static var defaultJSONEncoder: JSONEncoder = {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .formatted(CodableHelper.dateFormatter)
        encoder.outputFormatting = .prettyPrinted
        return encoder
    }()

    public static var dateFormatter: DateFormatter {
        get { return customDateFormatter ?? defaultDateFormatter }
        set { customDateFormatter = newValue }
    }
    public static var jsonDecoder: JSONDecoder {
        get { return customJSONDecoder ?? defaultJSONDecoder }
        set { customJSONDecoder = newValue }
    }
    public static var jsonEncoder: JSONEncoder {
        get { return customJSONEncoder ?? defaultJSONEncoder }
        set { customJSONEncoder = newValue }
    }

    open class func decode<T>(_ type: T.Type, from data: Data) -> Swift.Result<T, Error> where T: Decodable {
        return Swift.Result { try jsonDecoder.decode(type, from: data) }
    }

    open class func encode<T>(_ value: T) -> Swift.Result<Data, Error> where T: Encodable {
        return Swift.Result { try jsonEncoder.encode(value) }
    }
}
