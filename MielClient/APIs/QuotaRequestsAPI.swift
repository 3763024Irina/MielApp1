//
// QuotaRequestsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class QuotaRequestsAPI {

    /**
     Создать новый запрос на квоту
     
     - parameter quotaRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiAdminRequestsCreate(quotaRequest: QuotaRequest, apiResponseQueue: DispatchQueue = MielClientAPI.apiResponseQueue, completion: @escaping ((_ data: QuotaRequest?, _ error: Error?) -> Void)) -> RequestTask {
        return apiAdminRequestsCreateWithRequestBuilder(quotaRequest: quotaRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Создать новый запрос на квоту
     - POST /api/admin/requests/
     - Создаёт новый запрос на квоту. Требуются данные о офисе и сумме.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: tokenAuth
     - parameter quotaRequest: (body)  
     - returns: RequestBuilder<QuotaRequest> 
     */
    open class func apiAdminRequestsCreateWithRequestBuilder(quotaRequest: QuotaRequest) -> RequestBuilder<QuotaRequest> {
        let localVariablePath = "/api/admin/requests/"
        let localVariableURLString = MielClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: quotaRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<QuotaRequest>.Type = MielClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Удалить запрос на квоту
     
     - parameter id: (path) A unique integer value identifying this Запрос. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiAdminRequestsDestroy(id: Int, apiResponseQueue: DispatchQueue = MielClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return apiAdminRequestsDestroyWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Удалить запрос на квоту
     - DELETE /api/admin/requests/{id}/
     - Удаляет запрос на квоту по его ID.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: tokenAuth
     - parameter id: (path) A unique integer value identifying this Запрос. 
     - returns: RequestBuilder<Void> 
     */
    open class func apiAdminRequestsDestroyWithRequestBuilder(id: Int) -> RequestBuilder<Void> {
        var localVariablePath = "/api/admin/requests/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = MielClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = MielClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Получить детальную информацию о квоте
     
     - parameter id: (path) A unique integer value identifying this Запрос. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiAdminRequestsDetailsRetrieve(id: Int, apiResponseQueue: DispatchQueue = MielClientAPI.apiResponseQueue, completion: @escaping ((_ data: QuotaRequestDetail?, _ error: Error?) -> Void)) -> RequestTask {
        return apiAdminRequestsDetailsRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить детальную информацию о квоте
     - GET /api/admin/requests/{id}/details/
     - Возвращает детальную информацию о конкретной квоте, включая историю последних 5 запросов.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: tokenAuth
     - parameter id: (path) A unique integer value identifying this Запрос. 
     - returns: RequestBuilder<QuotaRequestDetail> 
     */
    open class func apiAdminRequestsDetailsRetrieveWithRequestBuilder(id: Int) -> RequestBuilder<QuotaRequestDetail> {
        var localVariablePath = "/api/admin/requests/{id}/details/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = MielClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<QuotaRequestDetail>.Type = MielClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Получить список запросов на квоты
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiAdminRequestsList(apiResponseQueue: DispatchQueue = MielClientAPI.apiResponseQueue, completion: @escaping ((_ data: [QuotaRequest]?, _ error: Error?) -> Void)) -> RequestTask {
        return apiAdminRequestsListWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить список запросов на квоты
     - GET /api/admin/requests/
     - Возвращает список квот со статусом `waited`. Доступно только администраторам.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: tokenAuth
     - returns: RequestBuilder<[QuotaRequest]> 
     */
    open class func apiAdminRequestsListWithRequestBuilder() -> RequestBuilder<[QuotaRequest]> {
        let localVariablePath = "/api/admin/requests/"
        let localVariableURLString = MielClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[QuotaRequest]>.Type = MielClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Частично обновить запрос на квоту
     
     - parameter id: (path) A unique integer value identifying this Запрос. 
     - parameter patchedQuotaRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiAdminRequestsPartialUpdate(id: Int, patchedQuotaRequest: PatchedQuotaRequest? = nil, apiResponseQueue: DispatchQueue = MielClientAPI.apiResponseQueue, completion: @escaping ((_ data: QuotaRequest?, _ error: Error?) -> Void)) -> RequestTask {
        return apiAdminRequestsPartialUpdateWithRequestBuilder(id: id, patchedQuotaRequest: patchedQuotaRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Частично обновить запрос на квоту
     - PATCH /api/admin/requests/{id}/
     - Позволяет обновить отдельные поля запроса на квоту.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: tokenAuth
     - parameter id: (path) A unique integer value identifying this Запрос. 
     - parameter patchedQuotaRequest: (body)  (optional)
     - returns: RequestBuilder<QuotaRequest> 
     */
    open class func apiAdminRequestsPartialUpdateWithRequestBuilder(id: Int, patchedQuotaRequest: PatchedQuotaRequest? = nil) -> RequestBuilder<QuotaRequest> {
        var localVariablePath = "/api/admin/requests/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = MielClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: patchedQuotaRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<QuotaRequest>.Type = MielClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Получить информацию о конкретном запросе на квоту
     
     - parameter id: (path) A unique integer value identifying this Запрос. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiAdminRequestsRetrieve(id: Int, apiResponseQueue: DispatchQueue = MielClientAPI.apiResponseQueue, completion: @escaping ((_ data: QuotaRequest?, _ error: Error?) -> Void)) -> RequestTask {
        return apiAdminRequestsRetrieveWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Получить информацию о конкретном запросе на квоту
     - GET /api/admin/requests/{id}/
     - Возвращает детальную информацию о запросе на квоту по его ID.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: tokenAuth
     - parameter id: (path) A unique integer value identifying this Запрос. 
     - returns: RequestBuilder<QuotaRequest> 
     */
    open class func apiAdminRequestsRetrieveWithRequestBuilder(id: Int) -> RequestBuilder<QuotaRequest> {
        var localVariablePath = "/api/admin/requests/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = MielClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<QuotaRequest>.Type = MielClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Обновить данные запроса на квоту
     
     - parameter id: (path) A unique integer value identifying this Запрос. 
     - parameter quotaRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func apiAdminRequestsUpdate(id: Int, quotaRequest: QuotaRequest, apiResponseQueue: DispatchQueue = MielClientAPI.apiResponseQueue, completion: @escaping ((_ data: QuotaRequest?, _ error: Error?) -> Void)) -> RequestTask {
        return apiAdminRequestsUpdateWithRequestBuilder(id: id, quotaRequest: quotaRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Обновить данные запроса на квоту
     - PUT /api/admin/requests/{id}/
     - Полностью обновляет данные запроса на квоту по его ID.
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: tokenAuth
     - parameter id: (path) A unique integer value identifying this Запрос. 
     - parameter quotaRequest: (body)  
     - returns: RequestBuilder<QuotaRequest> 
     */
    open class func apiAdminRequestsUpdateWithRequestBuilder(id: Int, quotaRequest: QuotaRequest) -> RequestBuilder<QuotaRequest> {
        var localVariablePath = "/api/admin/requests/{id}/"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = MielClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: quotaRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<QuotaRequest>.Type = MielClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
